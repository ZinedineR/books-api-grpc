// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	exception "books-api/pkg/exception"
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "books-api/internal/model"
)

// AuthorService is an autogenerated mock type for the AuthorService type
type AuthorService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, req
func (_m *AuthorService) Create(ctx context.Context, req *model.CreateAuthorReq) (*model.CreateAuthorRes, *exception.Exception) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.CreateAuthorRes
	var r1 *exception.Exception
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateAuthorReq) (*model.CreateAuthorRes, *exception.Exception)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateAuthorReq) *model.CreateAuthorRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CreateAuthorRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.CreateAuthorReq) *exception.Exception); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*exception.Exception)
		}
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, req
func (_m *AuthorService) Delete(ctx context.Context, req *model.DeleteAuthorReq) (*model.DeleteAuthorRes, *exception.Exception) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *model.DeleteAuthorRes
	var r1 *exception.Exception
	if rf, ok := ret.Get(0).(func(context.Context, *model.DeleteAuthorReq) (*model.DeleteAuthorRes, *exception.Exception)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.DeleteAuthorReq) *model.DeleteAuthorRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DeleteAuthorRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.DeleteAuthorReq) *exception.Exception); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*exception.Exception)
		}
	}

	return r0, r1
}

// Detail provides a mock function with given fields: ctx, req
func (_m *AuthorService) Detail(ctx context.Context, req *model.GetAuthorByIDReq) (*model.GetAuthorByIDRes, *exception.Exception) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Detail")
	}

	var r0 *model.GetAuthorByIDRes
	var r1 *exception.Exception
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetAuthorByIDReq) (*model.GetAuthorByIDRes, *exception.Exception)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetAuthorByIDReq) *model.GetAuthorByIDRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetAuthorByIDRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetAuthorByIDReq) *exception.Exception); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*exception.Exception)
		}
	}

	return r0, r1
}

// Find provides a mock function with given fields: ctx, req
func (_m *AuthorService) Find(ctx context.Context, req *model.GetAllAuthorReq) (*model.GetAllAuthorRes, *exception.Exception) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *model.GetAllAuthorRes
	var r1 *exception.Exception
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetAllAuthorReq) (*model.GetAllAuthorRes, *exception.Exception)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetAllAuthorReq) *model.GetAllAuthorRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetAllAuthorRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetAllAuthorReq) *exception.Exception); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*exception.Exception)
		}
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, req
func (_m *AuthorService) Update(ctx context.Context, req *model.UpdateAuthorReq) (*model.UpdateAuthorRes, *exception.Exception) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *model.UpdateAuthorRes
	var r1 *exception.Exception
	if rf, ok := ret.Get(0).(func(context.Context, *model.UpdateAuthorReq) (*model.UpdateAuthorRes, *exception.Exception)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.UpdateAuthorReq) *model.UpdateAuthorRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UpdateAuthorRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.UpdateAuthorReq) *exception.Exception); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*exception.Exception)
		}
	}

	return r0, r1
}

// NewAuthorService creates a new instance of AuthorService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthorService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthorService {
	mock := &AuthorService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
