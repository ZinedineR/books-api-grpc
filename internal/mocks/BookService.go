// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	exception "books-api/pkg/exception"
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "books-api/internal/model"
)

// BookService is an autogenerated mock type for the BookService type
type BookService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, req
func (_m *BookService) Create(ctx context.Context, req *model.CreateBookReq) (*model.CreateBookRes, *exception.Exception) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.CreateBookRes
	var r1 *exception.Exception
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateBookReq) (*model.CreateBookRes, *exception.Exception)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.CreateBookReq) *model.CreateBookRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CreateBookRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.CreateBookReq) *exception.Exception); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*exception.Exception)
		}
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, req
func (_m *BookService) Delete(ctx context.Context, req *model.DeleteBookReq) (*model.DeleteBookRes, *exception.Exception) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *model.DeleteBookRes
	var r1 *exception.Exception
	if rf, ok := ret.Get(0).(func(context.Context, *model.DeleteBookReq) (*model.DeleteBookRes, *exception.Exception)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.DeleteBookReq) *model.DeleteBookRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DeleteBookRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.DeleteBookReq) *exception.Exception); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*exception.Exception)
		}
	}

	return r0, r1
}

// Detail provides a mock function with given fields: ctx, req
func (_m *BookService) Detail(ctx context.Context, req *model.GetBookByIDReq) (*model.GetBookByIDRes, *exception.Exception) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Detail")
	}

	var r0 *model.GetBookByIDRes
	var r1 *exception.Exception
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetBookByIDReq) (*model.GetBookByIDRes, *exception.Exception)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetBookByIDReq) *model.GetBookByIDRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetBookByIDRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetBookByIDReq) *exception.Exception); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*exception.Exception)
		}
	}

	return r0, r1
}

// Find provides a mock function with given fields: ctx, req
func (_m *BookService) Find(ctx context.Context, req *model.GetAllBookReq) (*model.GetAllBookRes, *exception.Exception) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *model.GetAllBookRes
	var r1 *exception.Exception
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetAllBookReq) (*model.GetAllBookRes, *exception.Exception)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.GetAllBookReq) *model.GetAllBookRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetAllBookRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.GetAllBookReq) *exception.Exception); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*exception.Exception)
		}
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, req
func (_m *BookService) Update(ctx context.Context, req *model.UpdateBookReq) (*model.UpdateBookRes, *exception.Exception) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *model.UpdateBookRes
	var r1 *exception.Exception
	if rf, ok := ret.Get(0).(func(context.Context, *model.UpdateBookReq) (*model.UpdateBookRes, *exception.Exception)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.UpdateBookReq) *model.UpdateBookRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UpdateBookRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.UpdateBookReq) *exception.Exception); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*exception.Exception)
		}
	}

	return r0, r1
}

// NewBookService creates a new instance of BookService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookService(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookService {
	mock := &BookService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
