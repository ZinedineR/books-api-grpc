syntax = "proto3";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
option go_package = "books-api/proto/users/v1;users";

package proto.users.v1;
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "User Service",
    version: "v1",
    description: "to handle user service"
  },
  host: "localhost:8080",
};
service UserService {
  // Register a new user
  rpc Register (RegisterRequest) returns (RegisterResponse) {
    option (google.api.http) = {
      post: "/api/v1/auth/register"
      body: "*"
    };
  };

  // Login a user and return a JWT token
  rpc Login (LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/api/v1/auth/login"
      body: "*"
    };
  };
  // Find a list of users with pagination
  rpc Find (GetAllUserRequest) returns (GetAllUserResponse) {
    option (google.api.http) = {
      get: "/api/v1/users"
    };
  };

  // Get user details by ID
  rpc Detail (GetUserByIDRequest) returns (GetUserByIDResponse) {
    option (google.api.http) = {
      get: "/api/v1/users/{id}"
    };
  };
}

// User message that represents user entity
message User {
  string id = 1;                            // User ID
  string username = 2;                      // Username
  string password = 3;                      // Hashed password
}

// Request message for registering a new user
message RegisterRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Registering new user"
      description: "register to user with username and password"
      required: ["username", "password"]
    }
    example: "{\"username\": \"john_doe\", \"password\": \"Password!1\"}"
  };
  string username = 1;                      // Username for registration
  string password = 2;                      // Password for registration
}

// Response message for successful user registration
message RegisterResponse {
  User user = 1;                            // Registered user data
  MutationResponse response = 2;            // General mutation response
}

// Request message for logging in a user
message LoginRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Registering new user"
      description: "register to user with username and password"
      required: ["username", "password"]
    }
    example: "{\"username\": \"john_doe\", \"password\": \"Password!1\"}"
  };
  string username = 1;                      // Username for login
  string password = 2;                      // Password for login
}

// Response message for successful user login
message LoginResponse {
  string username = 1;                      // Username of the logged-in user
  string token = 2;                         // JWT token
}

// Request message for retrieving a paginated list of users
message GetAllUserRequest {
  int32 page = 1;                           // Page number for pagination
  int32 page_size = 2;                      // Number of items per page
  string filter = 3;                        // Filter criteria for users
  string sort = 4;                          // Sorting criteria
}

// Response message for retrieving a paginated list of users
message GetAllUserResponse {
  PaginationResponse pagination = 1;        // Pagination data
  repeated User users = 2;                  // List of user entities
  MutationResponse response = 3;            // General mutation response
}

// Request message for retrieving a user by ID
message GetUserByIDRequest {
  string id = 1;                            // User ID for details retrieval
}

// Response message for retrieving a specific user by ID
message GetUserByIDResponse {
  User user = 1;                            // Detailed user information
}

// Pagination response for paginated requests
message PaginationResponse {
  int32 page = 1;                           // Current page
  int32 page_size = 2;                      // Page size
  int64 total_pages = 3;                    // Total pages available
  int64 total_rows = 4;                     // Total number of rows
}

// Mutation response for tracking success messages on operations
message MutationResponse {
  string message = 1;                       // Success or error message
}
