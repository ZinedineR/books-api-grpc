// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: proto/books_lending/v1/books_lending.proto

package booklending

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BookLendingService_Create_FullMethodName = "/proto.booklending.v1.BookLendingService/Create"
	BookLendingService_Return_FullMethodName = "/proto.booklending.v1.BookLendingService/Return"
	BookLendingService_Extend_FullMethodName = "/proto.booklending.v1.BookLendingService/Extend"
	BookLendingService_Find_FullMethodName   = "/proto.booklending.v1.BookLendingService/Find"
	BookLendingService_Detail_FullMethodName = "/proto.booklending.v1.BookLendingService/Detail"
)

// BookLendingServiceClient is the client API for BookLendingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookLendingServiceClient interface {
	// Create a new book lending record
	Create(ctx context.Context, in *CreateBookLendingRequest, opts ...grpc.CallOption) (*CreateBookLendingResponse, error)
	// Return a book (mark as returned)
	Return(ctx context.Context, in *ReturnBookLendingRequest, opts ...grpc.CallOption) (*UpdateBookLendingResponse, error)
	// Extend the lending period of a book
	Extend(ctx context.Context, in *ExtendBookLendingRequest, opts ...grpc.CallOption) (*UpdateBookLendingResponse, error)
	// Retrieve all book lendings with pagination
	Find(ctx context.Context, in *GetAllBookLendingRequest, opts ...grpc.CallOption) (*GetAllBookLendingResponse, error)
	// Retrieve a specific book lending by ID
	Detail(ctx context.Context, in *GetBookLendingByIDRequest, opts ...grpc.CallOption) (*GetBookLendingByIDResponse, error)
}

type bookLendingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookLendingServiceClient(cc grpc.ClientConnInterface) BookLendingServiceClient {
	return &bookLendingServiceClient{cc}
}

func (c *bookLendingServiceClient) Create(ctx context.Context, in *CreateBookLendingRequest, opts ...grpc.CallOption) (*CreateBookLendingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBookLendingResponse)
	err := c.cc.Invoke(ctx, BookLendingService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookLendingServiceClient) Return(ctx context.Context, in *ReturnBookLendingRequest, opts ...grpc.CallOption) (*UpdateBookLendingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBookLendingResponse)
	err := c.cc.Invoke(ctx, BookLendingService_Return_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookLendingServiceClient) Extend(ctx context.Context, in *ExtendBookLendingRequest, opts ...grpc.CallOption) (*UpdateBookLendingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBookLendingResponse)
	err := c.cc.Invoke(ctx, BookLendingService_Extend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookLendingServiceClient) Find(ctx context.Context, in *GetAllBookLendingRequest, opts ...grpc.CallOption) (*GetAllBookLendingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllBookLendingResponse)
	err := c.cc.Invoke(ctx, BookLendingService_Find_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookLendingServiceClient) Detail(ctx context.Context, in *GetBookLendingByIDRequest, opts ...grpc.CallOption) (*GetBookLendingByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBookLendingByIDResponse)
	err := c.cc.Invoke(ctx, BookLendingService_Detail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookLendingServiceServer is the server API for BookLendingService service.
// All implementations must embed UnimplementedBookLendingServiceServer
// for forward compatibility
type BookLendingServiceServer interface {
	// Create a new book lending record
	Create(context.Context, *CreateBookLendingRequest) (*CreateBookLendingResponse, error)
	// Return a book (mark as returned)
	Return(context.Context, *ReturnBookLendingRequest) (*UpdateBookLendingResponse, error)
	// Extend the lending period of a book
	Extend(context.Context, *ExtendBookLendingRequest) (*UpdateBookLendingResponse, error)
	// Retrieve all book lendings with pagination
	Find(context.Context, *GetAllBookLendingRequest) (*GetAllBookLendingResponse, error)
	// Retrieve a specific book lending by ID
	Detail(context.Context, *GetBookLendingByIDRequest) (*GetBookLendingByIDResponse, error)
	mustEmbedUnimplementedBookLendingServiceServer()
}

// UnimplementedBookLendingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookLendingServiceServer struct {
}

func (UnimplementedBookLendingServiceServer) Create(context.Context, *CreateBookLendingRequest) (*CreateBookLendingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBookLendingServiceServer) Return(context.Context, *ReturnBookLendingRequest) (*UpdateBookLendingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Return not implemented")
}
func (UnimplementedBookLendingServiceServer) Extend(context.Context, *ExtendBookLendingRequest) (*UpdateBookLendingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Extend not implemented")
}
func (UnimplementedBookLendingServiceServer) Find(context.Context, *GetAllBookLendingRequest) (*GetAllBookLendingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedBookLendingServiceServer) Detail(context.Context, *GetBookLendingByIDRequest) (*GetBookLendingByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detail not implemented")
}
func (UnimplementedBookLendingServiceServer) mustEmbedUnimplementedBookLendingServiceServer() {}

// UnsafeBookLendingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookLendingServiceServer will
// result in compilation errors.
type UnsafeBookLendingServiceServer interface {
	mustEmbedUnimplementedBookLendingServiceServer()
}

func RegisterBookLendingServiceServer(s grpc.ServiceRegistrar, srv BookLendingServiceServer) {
	s.RegisterService(&BookLendingService_ServiceDesc, srv)
}

func _BookLendingService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookLendingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookLendingServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookLendingService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookLendingServiceServer).Create(ctx, req.(*CreateBookLendingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookLendingService_Return_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnBookLendingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookLendingServiceServer).Return(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookLendingService_Return_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookLendingServiceServer).Return(ctx, req.(*ReturnBookLendingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookLendingService_Extend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtendBookLendingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookLendingServiceServer).Extend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookLendingService_Extend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookLendingServiceServer).Extend(ctx, req.(*ExtendBookLendingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookLendingService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllBookLendingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookLendingServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookLendingService_Find_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookLendingServiceServer).Find(ctx, req.(*GetAllBookLendingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookLendingService_Detail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookLendingByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookLendingServiceServer).Detail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookLendingService_Detail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookLendingServiceServer).Detail(ctx, req.(*GetBookLendingByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookLendingService_ServiceDesc is the grpc.ServiceDesc for BookLendingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookLendingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.booklending.v1.BookLendingService",
	HandlerType: (*BookLendingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _BookLendingService_Create_Handler,
		},
		{
			MethodName: "Return",
			Handler:    _BookLendingService_Return_Handler,
		},
		{
			MethodName: "Extend",
			Handler:    _BookLendingService_Extend_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _BookLendingService_Find_Handler,
		},
		{
			MethodName: "Detail",
			Handler:    _BookLendingService_Detail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/books_lending/v1/books_lending.proto",
}
