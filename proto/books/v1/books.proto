syntax = "proto3";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
option go_package = "books-api/proto/books/v1;books";

package proto.books.v1;

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Book Service",
    version: "v1",
    description: "Service to handle book management"
  },
  host: "localhost:8082",
};

service BookService {
  // Create a new book
  rpc Create (CreateBookRequest) returns (CreateBookResponse) {
    option (google.api.http) = {
      post: "/api/v1/books"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      parameters: {
        headers: {
          name: "Authorization";
          description: "JWT Token: use Bearer <jwt>";
          type: STRING,
          required: true;
        };
      };
    };
  };

  // Update an existing book
  rpc Update (UpdateBookRequest) returns (UpdateBookResponse) {
    option (google.api.http) = {
      put: "/api/v1/books/{id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      parameters: {
        headers: {
          name: "Authorization";
          description: "JWT Token: use Bearer <jwt>";
          type: STRING,
          required: true;
        };
      };
    };
  };

  // Retrieve all books with pagination
  rpc Find (GetAllBookRequest) returns (GetAllBookResponse) {
    option (google.api.http) = {
      get: "/api/v1/books"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      parameters: {
        headers: {
          name: "Authorization";
          description: "JWT Token: use Bearer <jwt>";
          type: STRING,
          required: true;
        };
      };
    };
  };

  // Retrieve a specific book by ID
  rpc Detail (GetBookByIDRequest) returns (GetBookByIDResponse) {
    option (google.api.http) = {
      get: "/api/v1/books/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      parameters: {
        headers: {
          name: "Authorization";
          description: "JWT Token: use Bearer <jwt>";
          type: STRING,
          required: true;
        };
      };
    };
  };

  // Delete a book by ID
  rpc Delete (DeleteBookRequest) returns (DeleteBookResponse) {
    option (google.api.http) = {
      delete: "/api/v1/books/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      parameters: {
        headers: {
          name: "Authorization";
          description: "JWT Token: use Bearer <jwt>";
          type: STRING,
          required: true;
        };
      };
    };
  };
}

// Message representing a book entity
message Book {
  string id = 1;                          // Book ID
  string title = 2;                       // Title of the book
  string isbn = 3;                        // ISBN of the book
  string author_id = 4;                   // ID of the author
}

// Request message for creating a new book
message CreateBookRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Create a new book"
      description: "Details for creating a new book"
      required: ["title", "isbn", "author_id"]
    }
    example: "{\"title\": \"The Great Gatsby\", \"isbn\": \"978-3-16-148410-0\", \"author_id\": \"f47ac10b-58cc-4372-a567-0e02b2c3d479\"}"
  };
  string title = 1;
  string isbn = 2;
  string author_id = 3;
}

// Response message for successful book creation
message CreateBookResponse {
  Book book = 1;
  MutationResponse response = 2;
}

// Request message for updating a book
message UpdateBookRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Update an existing book"
      description: "Details for updating an existing book"
      required: ["id", "title", "isbn", "author_id"]
    }
  };
  string id = 1;                         // ID of the book to update
  string title = 2;
  string isbn = 3;
  string author_id = 4;
}

// Response message for successful book update
message UpdateBookResponse {
  Book book = 1;
  MutationResponse response = 2;
}

// Request message for retrieving a paginated list of books
message GetAllBookRequest {
  int32 page = 1;                        // Page number for pagination
  int32 page_size = 2;                   // Page size for pagination
  string filter = 3;                     // Filter criteria
  string sort = 4;                       // Sort order
}

// Response message for retrieving a paginated list of books
message GetAllBookResponse {
  PaginationResponse pagination = 1;
  repeated Book books = 2;
  MutationResponse response = 3;
}

// Request message for retrieving a book by ID
message GetBookByIDRequest {
  string id = 1;                         // ID of the book to retrieve
}

// Response message for retrieving a specific book by ID
message GetBookByIDResponse {
  Book book = 1;
}

// Request message for deleting a book by ID
message DeleteBookRequest {
  string id = 1;                         // ID of the book to delete
}

// Response message for successful book deletion
message DeleteBookResponse {
  MutationResponse response = 1;
}

// Mutation response for tracking success messages on operations
message MutationResponse {
  string message = 1;                    // Success or error message
}

// Pagination response for paginated requests
message PaginationResponse {
  int32 page = 1;
  int32 page_size = 2;
  int64 total_pages = 3;
  int64 total_rows = 4;
}
